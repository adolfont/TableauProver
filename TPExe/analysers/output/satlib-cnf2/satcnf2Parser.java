
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Dec 15 14:10:10 BRST 2004
//----------------------------------------------------

package satcnf2;

import formulasNew.*;
import signedFormulasNew.*;
import classicalLogic.*;
import problem.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Wed Dec 15 14:10:10 BRST 2004
  */
public class satcnf2Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public satcnf2Parser() {super();}

  /** Constructor which sets the default scanner. */
  public satcnf2Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\003\006\000\002\002\004\000\002\014" +
    "\004\000\002\014\002\000\002\012\003\000\002\013\003" +
    "\000\002\007\003\000\002\006\003\000\002\010\005\000" +
    "\002\010\003\000\002\010\004\000\002\010\004\000\002" +
    "\005\003\000\002\011\004\000\002\011\003\000\002\004" +
    "\004\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\004\007\005\001\002\000\004\002\032\001" +
    "\002\000\004\010\ufffd\001\002\000\004\010\007\001\002" +
    "\000\010\004\ufffc\005\ufffc\011\ufffc\001\002\000\010\004" +
    "\020\005\015\011\013\001\002\000\006\002\ufffe\006\030" +
    "\001\002\000\010\002\ufff5\005\ufff5\006\ufff5\001\002\000" +
    "\014\002\ufff1\004\ufff1\005\ufff1\006\ufff1\011\ufff1\001\002" +
    "\000\014\002\ufff3\004\020\005\ufff3\006\ufff3\011\013\001" +
    "\002\000\010\004\020\005\015\011\013\001\002\000\006" +
    "\002\ufffa\006\ufffa\001\002\000\010\002\ufff8\005\023\006" +
    "\ufff8\001\002\000\004\011\022\001\002\000\006\002\ufffb" +
    "\006\ufffb\001\002\000\014\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\011\ufff2\001\002\000\014\002\ufff7\004\020\005\015" +
    "\006\ufff7\011\013\001\002\000\006\002\ufff9\006\ufff9\001" +
    "\002\000\006\002\ufff6\006\ufff6\001\002\000\010\002\ufff4" +
    "\005\ufff4\006\ufff4\001\002\000\004\002\001\001\002\000" +
    "\004\011\031\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\006\003\003\012\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\007\001\001\000\002" +
    "\001\001\000\016\004\013\005\016\006\020\007\010\010" +
    "\015\011\011\001\001\000\004\014\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\013\011\025\001" +
    "\001\000\012\004\013\005\016\010\024\011\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\013\005\016" +
    "\010\023\011\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$satcnf2Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$satcnf2Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$satcnf2Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info){

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

//      System.err.println(m);
	throw new Error (m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$satcnf2Parser$actions {



	String operator;

	FormulaFactory ff = new FormulaFactory();
	SignedFormulaFactory sff = new SignedFormulaFactory();
	SignedFormulaList sfl = new SignedFormulaList();

		public Formula createNary (FormulaFactory ff, String operator, List l){

   		Connective connective;

   		if (operator.equals("And")){
   			connective = ClassicalConnectives.AND;
   		}
   		else if (operator.equals("Or")){
   			connective = ClassicalConnectives.OR;
   		}
   		else {
				return null;
   		}

//   		return ff.createCompositeFormula (connective, l);
		FormulaList fl = new FormulaList();
		for (int i=0; i<l.size(); i++){
			fl.add((Formula) l.get(i));
		}

		Formula result = fl.get(fl.size()-1);
		for (int i=fl.size()-2; i>=0;i--){
			result = ff.createCompositeFormula(connective, fl.get(i), result);
		}

		return result;

    }

	public Formula createBinary (FormulaFactory ff, String operator, List l){

   		Connective connective;

   		if (operator == "And"){
   			connective = ClassicalConnectives.AND;
   		}
   		else if (operator == "Or"){
   			connective = ClassicalConnectives.OR;
   		}
   		else {
   			connective = ClassicalConnectives.IMPLIES;
   		}

		return ff.createCompositeFormula (connective,
   								(Formula) (l.get(0)), (Formula) (l.get(1)) );
    }


  private final satcnf2Parser parser;

  /** Constructor */
  CUP$satcnf2Parser$actions(satcnf2Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$satcnf2Parser$do_action(
    int                        CUP$satcnf2Parser$act_num,
    java_cup.runtime.lr_parser CUP$satcnf2Parser$parser,
    java.util.Stack            CUP$satcnf2Parser$stack,
    int                        CUP$satcnf2Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$satcnf2Parser$result;

      /* select the action based on the action number */
      switch (CUP$satcnf2Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formula ::= NUMBER 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
                 		RESULT = ff.createAtomicFormula(n);
                  
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(2/*formula*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formula ::= NEG NUMBER 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
                 	RESULT = ff.createCompositeFormula(ClassicalConnectives.NOT,
                 					  ff.createAtomicFormula(n) );
                  
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(2/*formula*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // theClause ::= formula 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
                 	List auxFormulas = new ArrayList();
                 	auxFormulas.add(f);
                 	RESULT = auxFormulas;
                 
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(7/*theClause*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // theClause ::= formula theClause 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
                 	List auxFormulas = new ArrayList();
                 	auxFormulas.add(f);
                 	auxFormulas.addAll(l);
                 	RESULT = auxFormulas;
                 
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(7/*theClause*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // clause ::= theClause 
            {
              Formula RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
	   				if (l.size() >2)
	   					{
	    						RESULT = createNary (ff,
							"Or", l);
	   					}
	   				else if (l.size()==2)
	   					{
	   						RESULT = createBinary (ff,
							"Or", l);
	   					}
	   				else if (l.size()==1){
	   						RESULT = (Formula) (l.get(0));
	   					 }
					else 	{
	   						RESULT = ff.createCompositeFormula (
                 					ClassicalConnectives.BOTTOM );
						}
	             
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(3/*clause*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listOfClauses ::= ENDOFCLAUSE listOfClauses 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
                 	List auxClauses = new ArrayList();
			auxClauses.add(ff.createCompositeFormula(ClassicalConnectives.BOTTOM));
			auxClauses.addAll(l);
                 	RESULT = auxClauses;
		 
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(6/*listOfClauses*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listOfClauses ::= clause ENDOFCLAUSE 
            {
              List RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).right;
		Formula c = (Formula)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).value;
		
                 	List auxClauses = new ArrayList();
                 	auxClauses.add(c);
                 	RESULT = auxClauses;
                 
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(6/*listOfClauses*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listOfClauses ::= clause 
            {
              List RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		Formula c = (Formula)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
                 	List auxClauses = new ArrayList();
                 	auxClauses.add(c);
                 	RESULT = auxClauses;
                 
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(6/*listOfClauses*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listOfClauses ::= clause ENDOFCLAUSE listOfClauses 
            {
              List RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-2)).right;
		Formula c = (Formula)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
		 	List auxClauses = new ArrayList();
                 	auxClauses.add(c);
                 	auxClauses.addAll(l);
                 	RESULT = auxClauses;
                 
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(6/*listOfClauses*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // theFormula ::= listOfClauses 
            {
              Formula RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
	   				if (l.size() >2)
	   					{
	    						RESULT = createNary (ff,
							"And", l);
	   					}
	   				else if (l.size()==2)
	   					{
	   						RESULT = createBinary (ff,
							"And", l);
	   					}
	   				else if (l.size()==1){
	   						RESULT = (Formula) (l.get(0));
	   					 }
					else 	{
	   						RESULT = ff.createCompositeFormula (
                 					ClassicalConnectives.TOP );
						}
	             
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(4/*theFormula*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // signedFormula ::= theFormula 
            {
              SignedFormula RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
                 	RESULT = sff.createSignedFormula (ClassicalSigns.FALSE, f);
	
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(5/*signedFormula*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // problemClauses ::= CLAUSES 
            {
              Object RESULT = null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		String number = (String)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
				RESULT = number;
			
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(9/*problemClauses*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // problemVariables ::= VARIABLES 
            {
              Object RESULT = null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		String number = (String)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
				RESULT = number;
			
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(8/*problemVariables*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fim ::= 
            {
              Object RESULT = null;
		
		RESULT = null;
	
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(10/*fim*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fim ::= FINAL NUMBER 
            {
              Object RESULT = null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right;
		String numero = (String)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).value;
		
		RESULT = numero;
	
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(10/*fim*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).right;
		Problem start_val = (Problem)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).value;
		RESULT = start_val;
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$satcnf2Parser$parser.done_parsing();
          return CUP$satcnf2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file ::= problemVariables problemClauses signedFormula fim 
            {
              Problem RESULT = null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-3)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-3)).right;
		Object pv = (Object)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-2)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-2)).value;
		int sfleft = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).right;
		SignedFormula sf = (SignedFormula)((java_cup.runtime.Symbol) CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-1)).value;
		
   			Problem sr = new Problem("SATLIB CNF Format - without naries");

			sfl.add(sf);

   			sr.setSignedFormulaList (sfl);
   			sr.setSignedFormulaFactory(sff);
   			sr.setFormulaFactory(ff);
//   			sr.setNumberOfVariables ( (int) (Integer.parseInt (pv.toString())) );
//   			sr.setNumberOfClauses ( (int) (Integer.parseInt (pc.toString())) );

   			RESULT = sr;
//   			System.out.println (ff.toString());
   		
              CUP$satcnf2Parser$result = new java_cup.runtime.Symbol(1/*file*/, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$satcnf2Parser$stack.elementAt(CUP$satcnf2Parser$top-0)).right, RESULT);
            }
          return CUP$satcnf2Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

