
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Dec 14 12:27:31 BRST 2004
//----------------------------------------------------

package ConversorWagnerSATLIB;

import java.util.*;
import java_cup.runtime.*;
import java.text.ParseException;

/** CUP v0.10k generated parser.
  * @version Tue Dec 14 12:27:31 BRST 2004
  */
public class ConversorWagnerSATLIBParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConversorWagnerSATLIBParser() {super();}

  /** Constructor which sets the default scanner. */
  public ConversorWagnerSATLIBParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\005\005\000\002\003\003\000\002\003\002" +
    "\000\002\006\005\000\002\006\007\000\002\006\005\000" +
    "\002\006\007\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\010\003\000\002\010\005\000\002\011" +
    "\003\000\002\011\005\000\002\007\005\000\002\007\003" +
    "\000\002\007\003\000\002\007\004\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\004\004\001\002\000\014\006\015\013" +
    "\017\015\012\016\014\017\011\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\006\002\010\004\004\001\002\000" +
    "\006\002\001\004\001\001\002\000\004\002\000\001\002" +
    "\000\022\002\uffec\004\uffec\005\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\014\uffec\001\002\000\022\002\uffef\004\uffef" +
    "\005\uffef\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef\001" +
    "\002\000\022\002\ufff5\004\ufff5\005\ufff5\007\031\010\032" +
    "\011\ufff5\012\ufff5\014\ufff5\001\002\000\022\002\uffee\004" +
    "\uffee\005\uffee\007\uffee\010\uffee\011\uffee\012\uffee\014\uffee" +
    "\001\002\000\014\006\015\013\017\015\012\016\014\017" +
    "\011\001\002\000\014\002\ufffc\004\ufffc\005\027\011\022" +
    "\012\023\001\002\000\014\006\015\013\017\015\012\016" +
    "\014\017\011\001\002\000\010\011\022\012\023\014\021" +
    "\001\002\000\022\002\ufff0\004\ufff0\005\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\014\ufff0\001\002\000\014\006\015" +
    "\013\017\015\012\016\014\017\011\001\002\000\014\006" +
    "\015\013\017\015\012\016\014\017\011\001\002\000\016" +
    "\002\ufff6\004\ufff6\005\ufff6\011\ufff6\012\ufff6\014\ufff6\001" +
    "\002\000\016\002\ufff7\004\ufff7\005\ufff7\011\022\012\023" +
    "\014\ufff7\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\006\002\ufffd\004\ufffd\001\002\000\022\002\uffed\004\uffed" +
    "\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed\014\uffed\001" +
    "\002\000\014\006\015\013\017\015\012\016\014\017\011" +
    "\001\002\000\014\006\015\013\017\015\012\016\014\017" +
    "\011\001\002\000\020\002\ufff9\004\ufff9\005\ufff9\010\034" +
    "\011\ufff9\012\ufff9\014\ufff9\001\002\000\014\006\015\013" +
    "\017\015\012\016\014\017\011\001\002\000\020\002\ufff2" +
    "\004\ufff2\005\ufff2\010\037\011\ufff2\012\ufff2\014\ufff2\001" +
    "\002\000\016\002\ufff8\004\ufff8\005\ufff8\011\ufff8\012\ufff8" +
    "\014\ufff8\001\002\000\014\006\015\013\017\015\012\016" +
    "\014\017\011\001\002\000\016\002\ufff1\004\ufff1\005\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\001\002\000\020\002\ufffb\004" +
    "\ufffb\005\ufffb\007\042\011\ufffb\012\ufffb\014\ufffb\001\002" +
    "\000\014\006\015\013\017\015\012\016\014\017\011\001" +
    "\002\000\016\002\ufffa\004\ufffa\005\ufffa\011\ufffa\012\ufffa" +
    "\014\ufffa\001\002\000\020\002\ufff4\004\ufff4\005\ufff4\007" +
    "\045\011\ufff4\012\ufff4\014\ufff4\001\002\000\014\006\015" +
    "\013\017\015\012\016\014\017\011\001\002\000\016\002" +
    "\ufff3\004\ufff3\005\ufff3\011\ufff3\012\ufff3\014\ufff3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\006\004\005\005\004\001\001\000\006\006" +
    "\015\007\012\001\001\000\002\001\001\000\004\005\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\027\001\001\000\004\003\025\001\001\000" +
    "\006\006\017\007\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\024\007\012\001\001\000\004\007" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\040\001\001\000\004\007\032\001\001\000\002\001\001" +
    "\000\006\007\034\011\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\034\011\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\043\010\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\043" +
    "\010\045\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConversorWagnerSATLIBParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConversorWagnerSATLIBParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConversorWagnerSATLIBParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info){

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

//      System.err.println(m);
	throw new Error (m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConversorWagnerSATLIBParser$actions {
  private final ConversorWagnerSATLIBParser parser;

  /** Constructor */
  CUP$ConversorWagnerSATLIBParser$actions(ConversorWagnerSATLIBParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ConversorWagnerSATLIBParser$do_action(
    int                        CUP$ConversorWagnerSATLIBParser$act_num,
    java_cup.runtime.lr_parser CUP$ConversorWagnerSATLIBParser$parser,
    java.util.Stack            CUP$ConversorWagnerSATLIBParser$stack,
    int                        CUP$ConversorWagnerSATLIBParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConversorWagnerSATLIBParser$result;

      /* select the action based on the action number */
      switch (CUP$ConversorWagnerSATLIBParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // term ::= ID 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = i; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term ::= NEG term 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = "-(" + t + ")";
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= FALSE 
            {
              String RESULT = null;
		 RESULT = "+()"; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= TRUE 
            {
              String RESULT = null;
		 RESULT = "*()"; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= LPAREN expr RPAREN 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).value;
		 RESULT = e; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // orExpr ::= term OR orExpr 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String oe = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = t + " " + oe; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(7/*orExpr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // orExpr ::= term 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = t + ")"; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(7/*orExpr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // andExpr ::= term AND andExpr 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = t + " " + ae; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(6/*andExpr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // andExpr ::= term 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = t + ")"; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(6/*andExpr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= term 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = t; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr BIIMPLIES term 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = "<=>(" + e1 +  " " +  e2 + ")";
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr IMPLIES expr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = "->(" + e1 +  " " +  e2 + ")";
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= term OR term OR orExpr 
            {
              String RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String oe = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = "+(" + t1 +  " " +  t2 + " " + oe;  
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= term OR term 
            {
              String RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = "+(" + t1 +  " " +  t2 + ")";
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= term AND term AND andExpr 
            {
              String RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String ae = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = "*(" + t1 +  " " +  t2 + " " + ae;  
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= term AND term 
            {
              String RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = "*(" + t1 +  " " +  t2 + ")";
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // end ::= 
            {
              Object RESULT = null;

              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(1/*end*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // end ::= EOL 
            {
              Object RESULT = null;

              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(1/*end*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formula_part ::= SIGN expr end 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).value;
		 RESULT = s + " " + e;
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(3/*formula_part*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formula_list ::= formula_part 
            {
              String RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = f; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(2/*formula_list*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= formula_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).value;
		RESULT = start_val;
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ConversorWagnerSATLIBParser$parser.done_parsing();
          return CUP$ConversorWagnerSATLIBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // formula_list ::= formula_list formula_part 
            {
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).value;
		 RESULT = l + "\n" + f; 
              CUP$ConversorWagnerSATLIBParser$result = new java_cup.runtime.Symbol(2/*formula_list*/, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConversorWagnerSATLIBParser$stack.elementAt(CUP$ConversorWagnerSATLIBParser$top-0)).right, RESULT);
            }
          return CUP$ConversorWagnerSATLIBParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

