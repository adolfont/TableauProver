
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Dec 14 12:07:04 BRST 2004
//----------------------------------------------------

package sats2;

import formulasNew.*;
import signedFormulasNew.*;
import classicalLogic.*;
import problem.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue Dec 14 12:07:04 BRST 2004
  */
public class sats2Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sats2Parser() {super();}

  /** Constructor which sets the default scanner. */
  public sats2Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\004\003\000\002\002\004\000\002\010" +
    "\004\000\002\010\003\000\002\007\005\000\002\003\003" +
    "\000\002\003\002\000\002\005\006\000\002\005\005\000" +
    "\002\005\006\000\002\005\003\000\002\011\004\000\002" +
    "\011\003\000\002\006\005\000\002\006\003\000\002\006" +
    "\004\000\002\012\003\000\002\012\003\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\014\006\001\002\000\006\002\ufffe\014" +
    "\006\001\002\000\004\002\037\001\002\000\016\004\016" +
    "\005\010\006\020\007\015\010\017\013\013\001\002\000" +
    "\004\002\001\001\002\000\004\010\ufff1\001\002\000\004" +
    "\010\031\001\002\000\026\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\001\002\000\026\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\001\002" +
    "\000\010\002\ufffb\012\030\014\ufffb\001\002\000\004\010" +
    "\uffef\001\002\000\006\010\024\013\023\001\002\000\016" +
    "\004\016\005\010\006\020\007\015\010\017\013\013\001" +
    "\002\000\004\010\ufff0\001\002\000\004\011\022\001\002" +
    "\000\026\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\001\002\000\026" +
    "\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\001\002\000\016\004\016" +
    "\005\010\006\020\007\015\010\017\013\013\001\002\000" +
    "\004\011\026\001\002\000\026\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\001\002\000\006\002\ufffd\014\ufffd\001\002\000\006" +
    "\002\ufffc\014\ufffc\001\002\000\020\004\016\005\010\006" +
    "\020\007\015\010\017\011\033\013\013\001\002\000\020" +
    "\004\016\005\010\006\020\007\015\010\017\011\ufff5\013" +
    "\013\001\002\000\026\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\001" +
    "\002\000\004\011\035\001\002\000\026\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\001\002\000\004\011\ufff6\001\002\000\004" +
    "\002\000\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\010\004\004\007\003\010\006\001\001\000" +
    "\006\007\003\010\037\001\001\000\002\001\001\000\010" +
    "\005\013\006\011\012\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\020\006\011\012\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\024\006\011\012\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\031\006\011\011\033\012\010" +
    "\001\001\000\012\005\031\006\011\011\035\012\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sats2Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sats2Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sats2Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info){

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

//      System.err.println(m);
	throw new Error (m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sats2Parser$actions {



	String operator;

	FormulaFactory ff = new FormulaFactory();
	SignedFormulaFactory sff = new SignedFormulaFactory();
	SignedFormulaList sfl = new SignedFormulaList();

	public Formula createNary (FormulaFactory ff, String operator, List l){

   		Connective connective;

   		if (operator.equals("And")){
   			connective = ClassicalConnectives.ANDN;
   		}
   		else if (operator.equals("Or")){
   			connective = ClassicalConnectives.ORN;
   		}
   		else {
				return null;
   		}

   		return ff.createCompositeFormula (connective, l);
    }

	public Formula createBinary (FormulaFactory ff, String operator, List l){

   		Connective connective;

   		if (operator.equals("And")){
   			connective = ClassicalConnectives.AND;
   		}
   		else if (operator.equals("Or")){
   			connective = ClassicalConnectives.OR;
   		}
   		else if (operator.equals("Implies")){
   			connective = ClassicalConnectives.IMPLIES;
   		}
   		else{
   			// Error
   			connective = ClassicalConnectives.IMPLIES;
   			System.exit(1);
   		}

		return ff.createCompositeFormula (connective,
   								(Formula) (l.get(0)), (Formula) (l.get(1)) );
    }


	public SignedFormula createSignedFormula (SignedFormulaFactory sff,
			String sign, Formula f){

    	FormulaSign fs;

    	if (sign.equals("T")){
    		fs = ClassicalSigns.TRUE;
    	}
    	else if (sign.equals("F")){
    		fs = ClassicalSigns.FALSE;
    	}
    	else { 	// Error
	    		fs = ClassicalSigns.FALSE;
   		        System.exit(1);
    	}

		return sff.createSignedFormula (fs, f);
    }


  private final sats2Parser parser;

  /** Constructor */
  CUP$sats2Parser$actions(sats2Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sats2Parser$do_action(
    int                        CUP$sats2Parser$act_num,
    java_cup.runtime.lr_parser CUP$sats2Parser$parser,
    java.util.Stack            CUP$sats2Parser$stack,
    int                        CUP$sats2Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sats2Parser$result;

      /* select the action based on the action number */
      switch (CUP$sats2Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // oper ::= IMPLIES 
            {
              String RESULT = null;
		
                 	RESULT = "Implies";
                 
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(8/*oper*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // oper ::= OR 
            {
              String RESULT = null;
		
                 	RESULT = "Or";
                 
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(8/*oper*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // oper ::= AND 
            {
              String RESULT = null;
		
                 	RESULT = "And";
                  
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(8/*oper*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term ::= NEG STRING 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).value;
		
                 	RESULT = ff.createCompositeFormula(ClassicalConnectives.NOT,
                 						  ff.createAtomicFormula(n) );
                  
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(4/*term*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= STRING 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).value;
		
                 	RESULT = ff.createAtomicFormula(n);
                 
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(4/*term*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= LPAREN formula RPAREN 
            {
              Formula RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).value;
		
                 	RESULT = f;
                 
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(4/*term*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listOfFormulas ::= formula 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).value;
		
                 		List auxFormulas = new ArrayList();
                 		auxFormulas.add(f);
                 		RESULT = auxFormulas;
                 	
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(7/*listOfFormulas*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listOfFormulas ::= formula listOfFormulas 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).value;
		
                 		List auxFormulas = new ArrayList();
                 		auxFormulas.add(f);
                 		auxFormulas.addAll(l);
                 		RESULT = auxFormulas;
                 
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(7/*listOfFormulas*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formula ::= term 
            {
              Formula RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right;
		Formula t = (Formula)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).value;
		
                 	RESULT = t;
                 
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(3/*formula*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formula ::= NEG LPAREN formula RPAREN 
            {
              Formula RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).value;
		
                 	RESULT = ff.createCompositeFormula(ClassicalConnectives.NOT, f );
                 
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(3/*formula*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formula ::= oper LPAREN RPAREN 
            {
              Formula RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-2)).value;
		
                 	if (o == "And"){
                 		RESULT = ff.createCompositeFormula (
                 					ClassicalConnectives.TOP);
                 	}
                 	else {
                 		RESULT = ff.createCompositeFormula (
                 					ClassicalConnectives.BOTTOM);
                 	}
                 
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(3/*formula*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formula ::= oper LPAREN listOfFormulas RPAREN 
            {
              Formula RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).value;
		
            		operator = o;

	   				if (l.size() >2)
	   					{
	    						RESULT = createNary (ff, operator, l);
	   					}
	   				else if (l.size()==2)
	   					{
	   						RESULT = createBinary (ff, operator, l);
	   					}
	   				else {
	   						RESULT = (Formula) (l.get(0));
	   					 }
	             
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(3/*formula*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // end ::= 
            {
              Object RESULT = null;

              CUP$sats2Parser$result = new java_cup.runtime.Symbol(1/*end*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // end ::= EOL 
            {
              Object RESULT = null;

              CUP$sats2Parser$result = new java_cup.runtime.Symbol(1/*end*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // signed_formula ::= SIGN formula end 
            {
              SignedFormula RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).value;
		
                 	RESULT = createSignedFormula (sff, s, f);
                 
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(5/*signed_formula*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formula_list ::= signed_formula 
            {
              SignedFormulaList RESULT = null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right;
		SignedFormula sf = (SignedFormula)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).value;
		
               		SignedFormulaList auxFormulas = new SignedFormulaList();
               		auxFormulas.add(sf);
               		RESULT = auxFormulas;
                 
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(6/*formula_list*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formula_list ::= signed_formula formula_list 
            {
              SignedFormulaList RESULT = null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).right;
		SignedFormula sf = (SignedFormula)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).value;
		int sflleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left;
		int sflright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right;
		SignedFormulaList sfl = (SignedFormulaList)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).value;
		
               		SignedFormulaList auxFormulas = new SignedFormulaList();
               		auxFormulas.add(sf);
               		auxFormulas.addAll(sfl);
               		RESULT = auxFormulas;
   				
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(6/*formula_list*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).right;
		Problem start_val = (Problem)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).value;
		RESULT = start_val;
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$sats2Parser$parser.done_parsing();
          return CUP$sats2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file ::= formula_list 
            {
              Problem RESULT = null;
		int sflleft = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left;
		int sflright = ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right;
		SignedFormulaList sfl = (SignedFormulaList)((java_cup.runtime.Symbol) CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).value;
		
   			Problem ps = new Problem("SATLIB SAT Format");

   			ps.setFormulaFactory(ff);
   			ps.setSignedFormulaFactory(sff);
   			ps.setSignedFormulaList (sfl);

   			RESULT = ps;
   		
              CUP$sats2Parser$result = new java_cup.runtime.Symbol(2/*file*/, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$sats2Parser$stack.elementAt(CUP$sats2Parser$top-0)).right, RESULT);
            }
          return CUP$sats2Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

