package SATH2;
import formulasNew.*;
import signedFormulasNew.*;
import classicalLogic.*;
import problem.*;
import java.util.*;
import java_cup.runtime.*;

parser code {:

    public void report_error(String message, Object info){

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

//      System.err.println(m);
	throw new Error (m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }
:};

action code {:

	String operator;

	FormulaFactory ff = new FormulaFactory();
	SignedFormulaFactory sff = new SignedFormulaFactory();
	SignedFormulaList sfl = new SignedFormulaList();


	public Formula createNary (FormulaFactory ff, String operator, List l){

   		Connective connective;

   		if (operator.equals("And")){
   			connective = ClassicalConnectives.AND;
   		}
   		else if (operator.equals("Or")){
   			connective = ClassicalConnectives.OR;
   		}
   		else {
				return null;
   		}

//   		return ff.createCompositeFormula (connective, l);
		FormulaList fl = new FormulaList();
		for (int i=0; i<l.size(); i++){
			fl.add((Formula) l.get(i));
		}

		Formula result = fl.get(fl.size()-1);
		for (int i=fl.size()-2; i>=0;i--){
			result = ff.createCompositeFormula(connective, fl.get(i), result);
		}

		return result;

    }

	public Formula createBinary (FormulaFactory ff, String operator, List l){

   		Connective connective;

   		if (operator.equals("And")){
   			connective = ClassicalConnectives.AND;
   		}
   		else if (operator.equals("Or")){
   			connective = ClassicalConnectives.OR;
   		}
   		else if (operator.equals("Implies")){
   			connective = ClassicalConnectives.IMPLIES;
   		}
   		else if (operator.equals("Biimplies")){
   			connective = ClassicalConnectives.BIIMPLIES;
   		}
   		else{
     			// Error
   			connective = ClassicalConnectives.IMPLIES;
 			System.exit(1);
   		}

		return ff.createCompositeFormula (connective,
   								(Formula) (l.get(0)), (Formula) (l.get(1)) );
    }


	public SignedFormula createSignedFormula (SignedFormulaFactory sff,
			String sign, Formula f){

    	FormulaSign fs;

    	if (sign.equals("T")){
    		fs = ClassicalSigns.TRUE;
    	}
    	else if (sign.equals("F")){
    		fs = ClassicalSigns.FALSE;
    	}
    	else { 	// Error
	    		fs = ClassicalSigns.FALSE;
   		        System.exit(1);
    	}

		return sff.createSignedFormula (fs, f);
    }

:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal           PROBLEM, NEG, AND, OR, IMPLIES, LPAREN, RPAREN, TOP, BOTTOM;
terminal String    NUMBER;

non terminal Object     	problemLine;
non terminal Problem 	file;
non terminal Formula   		theFormula, formula, term;
non terminal List      		listOfFormulas;
non terminal String    		oper;


/* -------------Precedence and Associatively of Terminals Section----------- */

   file ::= problemLine:n theFormula:f
   		{:
   			Problem ps = new Problem("SATLIB SAT Format with Header");

   			ps.setFormulaFactory(ff);
			SignedFormula sf = sff.createSignedFormula(ClassicalSigns.FALSE, f);
   			ps.setSignedFormulaFactory(sff);
			sfl.add(sf);
   			ps.setSignedFormulaList (sfl);

   			RESULT = ps;

   		:};

   problemLine ::= PROBLEM:number
			{:

				RESULT = number;
			:} ;

   theFormula ::= formula:f
                 {:
                 	RESULT = f;
                 :}
                 ;

   formula      ::=
           oper:o LPAREN listOfFormulas:l RPAREN
                 {:
            		operator = o;

	   				if (l.size() >2)
	   					{
	    						RESULT = createNary (ff, operator, l);
	   					}
	   				else if (l.size()==2)
	   					{
	   						RESULT = createBinary (ff, operator, l);
	   					}
	   				else {
	   						RESULT = (Formula) (l.get(0));
	   					 }
	             :}
           |
           oper:o LPAREN RPAREN
                 {:
                 	if (o == "And"){
                 		RESULT = ff.createCompositeFormula (
                 					ClassicalConnectives.TOP);
                 	}
                 	else {
                 		RESULT = ff.createCompositeFormula (
                 					ClassicalConnectives.BOTTOM);
                 	}
                 :}
	     |
           NEG LPAREN formula:f RPAREN
                 {:
                 	RESULT = ff.createCompositeFormula(ClassicalConnectives.NOT, f );
                 :}
           |
           term:t
                 {:
                 	RESULT = t;
                 :}
           ;


   listOfFormulas ::= formula:f listOfFormulas:l
                 {:
                 		List auxFormulas = new ArrayList();
                 		auxFormulas.add(f);
                 		auxFormulas.addAll(l);
                 		RESULT = auxFormulas;
                 :}
			|
			formula:f
                 	{:
                 		List auxFormulas = new ArrayList();
                 		auxFormulas.add(f);
                 		RESULT = auxFormulas;
                 	:}
			 ;

   term      ::= LPAREN formula:f RPAREN
                 {:
                 	RESULT = f;
                 :}
                  |
                 NUMBER:n
                 {:
                 	RESULT = ff.createAtomicFormula(n);
                 :}
		 | NEG NUMBER:n
                 {:
                 	RESULT = ff.createCompositeFormula(ClassicalConnectives.NOT,
                 						  ff.createAtomicFormula(n) );
                  :}
		 | TOP
		 {:
		       RESULT = ff.createCompositeFormula(ClassicalConnectives.TOP);
		 :}
		 | BOTTOM
		 {:
		       RESULT = ff.createCompositeFormula(ClassicalConnectives.BOTTOM);
		 :};

   oper ::= AND
                 {:
                 	RESULT = "And";
                  :}
		|
		OR
                 {:
                 	RESULT = "Or";
                 :}
		|
		IMPLIES
                 {:
                 	RESULT = "Implies";
                 :}
		;

